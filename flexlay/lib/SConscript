## -*- mode: python -*-
##  $Id$
##
##  Flexlay - A Generic 2D Game Editor
##  Copyright (C) 2004 Ingo Ruhnke <grumbel@gmx.de>
##
##  This program is free software; you can redistribute it and/or
##  modify it under the terms of the GNU General Public License
##  as published by the Free Software Foundation; either version 2
##  of the License, or (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with this program; if not, write to the Free Software
##  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

import os
import glob

Import('clanLib_env')

opts = Variables('custom.py')
opts.Add('CXX', 'The C++ compiler.', 'g++')
opts.Add('CXXFLAGS', 'The C++ compiler flags.', ['-g3', '-O0', '-Wall', '-fPIC'])
opts.Add('CPPPATH', 'additional header path', '')
opts.Add('LIBPATH', 'additional library path', '')

opts.Add('DESTDIR', 'destination directory which gets appended to PREFIX', '')
opts.Add('PREFIX',  'PREFIX, ie. /usr/local', '/usr/local')

env = Environment(SHLIBPREFIX='',
                  ENV = os.environ,
                  options=opts)
Help(opts.GenerateHelpText(env))

#env.Program('sharedptrtest', 'sharedptrtest.cpp',
#            CPPPATH=['/home/ingo/run/ClanLib-0.8-current/include/ClanLib-0.8/'])

# env.Program('simpleed',
#             ['simpleed.cpp'],
#             CPPPATH=['.', 
#                     '/home/ingo/run/ClanLib-0.8-current//include/ClanLib-0.8/'],
#            LIBPATH=['.', '/home/ingo/run/ClanLib-0.8-current//lib/'],
#            LIBS=['flexlay'])

libflexlay_env = env.Clone()
flexlay_lib = libflexlay_env.StaticLibrary(
    target = 'libflexlay.a',
    source = [
    'blitter.cpp',
    'box.cpp',
    'brush.cpp',
    'generated_brush.cpp',
    'brushmask.cpp',
    'command_group.cpp',
    'command.cpp',
    'console.cpp',
    'colorpicker.cpp',
    'drawer_properties.cpp',
    'editor_map.cpp',
    'editor_map_component.cpp',
    'flexlay.cpp',
    'globals.cpp',
    'layer.cpp',
    'helper.cpp', 
    'graphic_context_state.cpp',
    'gui_manager.cpp',
    'icon.cpp',
    'directory_view.cpp',
    'fonts.cpp',
    'minimap.cpp',
    'meta_data.cpp',
    'onion_skin_layer.cpp',
    'object_layer.cpp',
    'object_add_command.cpp',
    'object_brush.cpp',
    'object_delete_command.cpp',
    'object_move_command.cpp',
    'object_selector.cpp',
    'object_transform_command.cpp',
    'objmap_object.cpp',
    'objmap_path_node.cpp',
    'objmap_object_impl.cpp',
    'objmap_sprite_object.cpp',
    'objmap_control_point.cpp',
    'objmap_rect_object.cpp',
    'paint_command.cpp',
    'panel.cpp',
    'menu.cpp',
    'menubar.cpp',
    'popup_menu.cpp',
    'lispreader.cpp',
    'bitmap_layer.cpp',
    'sketch_layer.cpp',
    'stroke.cpp',
    'stroke_drawer.cpp',
    'sprite_stroke_drawer.cpp',
    'sprite_brush.cpp',
    'marker_stroke_drawer.cpp',
    'slider.cpp', 
    'scrollbar.cpp',
    'tile.cpp',
    'titlebar.cpp',
    'tile_brush.cpp',
    'tile_provider.cpp',
    'tile_editor.cpp',
    'tile_selection.cpp',
    'tile_selector.cpp',
    'tilemap_layer.cpp',
    'tileset.cpp',
    'workspace.cpp',
    'window.cpp',
    'viewport.cpp',

    'tools/tool.cpp',
    'tools/tilemap_paint_tool.cpp',
    'tools/tilemap_select_tool.cpp',
    'tools/sketch_stroke_tool.cpp',
    'tools/objmap_select_tool.cpp',
    'tools/layer_move_tool.cpp',
    'tools/workspace_move_tool.cpp',
    'tools/zoom_tool.cpp',
    'tools/zoom2_tool.cpp'
    ],
    CPPPATH = ['.', '..'] + clanLib_env['CPPPATH'],
    CXXFLAGS  = env['CXXFLAGS'] + clanLib_env['CCFLAGS'],
    LINKFLAGS = clanLib_env['LINKFLAGS'],
    LIBPATH=['$USER_LIBPATH'] + clanLib_env['LIBPATH'],
    LIBS = clanLib_env['LIBS'])

flexlay_data = \
             glob.glob('../data/images/files/*.png') + \
             glob.glob('../data/images/fonts/*.png') + \
             glob.glob('../data/images/icons16/*.png') + \
             glob.glob('../data/images/icons24/*.png') + \
             glob.glob('../data/gui/gui.xml')    + \
             glob.glob('../data/gui/*/*.tga')    + \
             glob.glob('../data/gui/*/*.png')    + \
             glob.glob('../data/*.xml')

flexlay_headers = glob.glob('*.hxx')

flexlay_datadir = env['DESTDIR'] + env['PREFIX'] + '/share/flexlay'

install_lib     = env.Alias('install_lib', Install(env['DESTDIR'] + env['PREFIX'] + '/lib', flexlay_lib))
install_headers = env.Alias('install_headers', Install(env['DESTDIR'] + env['PREFIX'] + '/include/flexlay', flexlay_headers))
install_data    = env.Alias('install_data', InstallAs([os.path.join(flexlay_datadir, i[8:]) for i in flexlay_data],
                                                      flexlay_data))
env.Alias('install', [install_data, install_lib, install_headers])

# EOF #
