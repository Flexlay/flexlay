import os
import sys
import code
from flexlay import *
from sexpr   import *

class Level:
    version = 2
    filename = None
    
    name   = "no name"
    author = "no author"
    theme = "antarctica"
    time = 999
    music = "Mortimers_chipdisko.mod"
    
    objects = None
    camera  = None

    sectors = None
    current_sector = None

    def __init__(self, *params):
        if len(params) == 2:
            # New Level
            (width, height) = params
            
            self.name   = "No Name"
            self.author = "No Author"

            self.width  = width
            self.height = height

            self.current_sector = Sector(self)
            self.current_sector.new(width, height)
            self.sectors = []
            self.sectors.append(self.current_sector)
            
        elif len(params) == 1:
            # Load Level from file
            (self.filename,) = params
            
            tree = sexpr_read_from_file(self.filename)
            if tree == None:
                raise ("Couldn't load level: ", filename)
            
            data = tree[1:]

            self.version = get_value_from_tree(["version", "_"], data, 1)

            if (self.version == 1):
                self.parse_v1(data)
            else:
                self.parse_v2(data)
        else:
            raise "Wrong arguments for SuperTux::___init__"

    def parse_v2(self, data):
        self.name    = get_value_from_tree(["name", "_"], data, "no name")
        self.author  = get_value_from_tree(["author", "_"], data, "no author")
        self.time    = int(get_value_from_tree(["time", "_"], data, "999"))
        
        self.sectors = []
        for sec in sexpr_filter("sector", data):
            sector = Sector(self)
            sector.load_v2(sec)
            self.sectors.append(sector)
            if sector.name == "main":
                self.current_sector = sector
                
        if self.current_sector == None:
            print "Error: No main sector defined: ", sectors

    def parse_v1(self, data):
        sector = Sector(self)
        sector.load_v1(data)
        
        self.sectors = []
        self.sectors.append(sector)
        self.current_sector = sector
        
        self.name    = get_value_from_tree(["name", "_"], data, "no name")
        self.author  = get_value_from_tree(["author", "_"], data, "no author")
        self.time    = int(get_value_from_tree(["time", "_"], data, "999"))       
            
          
    def resize(self, size, pos):
        self.width  = size.width
        self.height = size.height
        self.background.resize(size, pos)
        self.interactive.resize(size, pos)
        self.foreground.resize(size, pos)
        
    def save(self, filename):
        self.save_v2(filename)

    def save_v2(self, filename):
        f = file(filename, 'w')
        f.write(";; Generated by Flexlay Editor\n"
                "(supertux-level\n")
        f.write("  (version 2)\n")
        f.write("  (name   \"%s\")\n" % self.name)
        f.write("  (author \"%s\")\n" % self.author)
        f.write("  (width  %s)\n"  % self.width)
        f.write("  (height  %s)\n" % self.height)

        f.write("  (music  \"%s\")\n" % self.music)
        f.write("  (time   \"%s\")\n" % self.time)

        f.write("  (gravity %d)\n" % self.gravity)

        f.write("  (theme \"%s\")\n" % self.theme)

        f.write("  (interactive-tm\n")
        for i in self.interactive.get_data():
            f.write("%d " % i)
        f.write("  )\n\n")

        f.write("  (background-tm\n")
        for i in self.background.get_data():
            f.write("%d " % i)
        f.write("  )\n\n")

        f.write("  (foreground-tm\n")
        for i in self.foreground.get_data():
            f.write("%d " % i)
        f.write("  )\n\n")

        f.write("  (camera\n")
        f.write("    (mode \"autoscroll\")\n")
        f.write("    (path\n")
        for obj in self.objects.get_objects():
            pathnode = get_python_object(obj.get_metadata())
            if (pathnode.__class__ == PathNode):
                f.write("     (point (x %d) (y %d) (speed 1))\n" % (obj.get_pos().x, obj.get_pos().y))
        f.write("  ))\n\n")

        f.write("  (objects\n")
        for obj in self.objects.get_objects():
            badguy = get_python_object(obj.get_metadata())
            if (badguy.__class__ == BadGuy):
                pos    = obj.get_pos()
                if (badguy.type != "resetpoint"):
                    f.write("     (%s (x %d) (y %d))\n" % (badguy.type, int(pos.x), int(pos.y)))
        f.write("  )\n\n")

        f.write("  (reset-points\n")
        for obj in self.objects.get_objects():
            badguy = get_python_object(obj.get_metadata())
            if (badguy.__class__ == BadGuy):
                pos    = obj.get_pos()
                if (badguy.type == "resetpoint"):
                    f.write("     (point (x %d) (y %d))\n" % (int(pos.x), int(pos.y)))
        f.write("  )\n\n")
        
        f.write(" )\n\n;; EOF ;;\n")

    def save_v1(self, filename):
        f = file(filename, 'w')
        f.write(";; Generated by Flexlay Editor\n"
                "(supertux-level\n")
        f.write("  (version 1)\n")
        f.write("  (name   \"%s\")\n" % self.name)
        f.write("  (author \"%s\")\n" % self.author)
        f.write("  (width  %s)\n"  % self.width)
        f.write("  (height  %s)\n" % self.height)

        f.write("  (music  \"%s\")\n" % self.music)
        f.write("  (time   \"%s\")\n" % self.time)

        f.write("  (gravity %d)\n" % self.gravity)

        f.write("  (theme \"%s\")\n" % self.theme)

        f.write("  (interactive-tm\n")
        for i in self.interactive.get_data():
            f.write("%d " % i)
        f.write("  )\n\n")

        f.write("  (background-tm\n")
        for i in self.background.get_data():
            f.write("%d " % i)
        f.write("  )\n\n")

        f.write("  (foreground-tm\n")
        for i in self.foreground.get_data():
            f.write("%d " % i)
        f.write("  )\n\n")

        f.write("  (camera\n")
        f.write("    (mode \"autoscroll\")\n")
        f.write("    (path\n")
        for obj in self.objects.get_objects():
            pathnode = get_python_object(obj.get_metadata())
            if (pathnode.__class__ == PathNode):
                f.write("     (point (x %d) (y %d) (speed 1))\n" % (obj.get_pos().x, obj.get_pos().y))
        f.write("  ))\n\n")

        f.write("  (objects\n")
        for obj in self.objects.get_objects():
            badguy = get_python_object(obj.get_metadata())
            if (badguy.__class__ == BadGuy):
                pos    = obj.get_pos()
                if (badguy.type != "resetpoint"):
                    f.write("     (%s (x %d) (y %d))\n" % (badguy.type, int(pos.x), int(pos.y)))
        f.write("  )\n\n")

        f.write("  (reset-points\n")
        for obj in self.objects.get_objects():
            badguy = get_python_object(obj.get_metadata())
            if (badguy.__class__ == BadGuy):
                pos    = obj.get_pos()
                if (badguy.type == "resetpoint"):
                    f.write("     (point (x %d) (y %d))\n" % (int(pos.x), int(pos.y)))
        f.write("  )\n\n")
        
        f.write(" )\n\n;; EOF ;;\n")

    def activate_sector(self, sector, workspace):
        for sec in self.sectors:
            if sec.name == sector:
                sec.activate(workspace)
                break

    def get_sectors(self):
        return map(lambda sec: sec.name, self.sectors)

    def activate(self, workspace):
        self.current_sector.activate(workspace)

Level.BACKGROUND  = 0
Level.INTERACTIVE = 1
Level.FOREGROUND  = 2

# EOF #
